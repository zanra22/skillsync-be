# Generated by Django 5.2.6 on 2025-10-08 12:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LessonContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roadmap_step_title', models.CharField(db_index=True, help_text="Topic title (e.g., 'Python Variables')", max_length=255)),
                ('lesson_number', models.IntegerField(help_text='Lesson sequence number (1, 2, 3...)', validators=[django.core.validators.MinValueValidator(1)])),
                ('learning_style', models.CharField(choices=[('hands_on', 'Hands-on Projects'), ('video', 'Video Tutorials'), ('reading', 'Reading & Research'), ('mixed', 'Mix of Everything')], db_index=True, help_text='Learning style this lesson is optimized for', max_length=50)),
                ('content', models.JSONField(help_text='Lesson data structure (text, exercises, videos, diagrams, etc.)')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('estimated_duration', models.IntegerField(default=30, help_text='Estimated time to complete (minutes)')),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when lesson was generated')),
                ('generation_prompt', models.TextField(blank=True, help_text='Prompt sent to AI (for debugging/improvement)')),
                ('ai_model_version', models.CharField(default='gemini-1.5-flash', help_text='AI model used for generation', max_length=50)),
                ('upvotes', models.IntegerField(default=0, help_text='Number of community upvotes', validators=[django.core.validators.MinValueValidator(0)])),
                ('downvotes', models.IntegerField(default=0, help_text='Number of community downvotes', validators=[django.core.validators.MinValueValidator(0)])),
                ('approval_status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Community Approved'), ('rejected', 'Community Rejected'), ('mentor_verified', 'Mentor Verified')], db_index=True, default='pending', help_text='Approval status (mentor_verified has highest trust)', max_length=20)),
                ('view_count', models.IntegerField(default=0, help_text='Number of times lesson was viewed', validators=[django.core.validators.MinValueValidator(0)])),
                ('completion_rate', models.FloatField(default=0.0, help_text='Percentage of users who complete this lesson', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('average_quiz_score', models.FloatField(default=0.0, help_text='Average quiz score from all users (learning effectiveness)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('cache_key', models.CharField(db_index=True, help_text='MD5 hash of topic+lesson_num+style for fast lookups', max_length=32)),
                ('generated_by', models.ForeignKey(blank=True, help_text='User who triggered this lesson generation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_lessons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lesson Content',
                'verbose_name_plural': 'Lesson Contents',
                'ordering': ['-upvotes', '-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='LessonVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('upvote', 'Upvote'), ('downvote', 'Downvote')], help_text='Vote type', max_length=10)),
                ('comment', models.TextField(blank=True, help_text='Optional feedback about the lesson')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='lessons.lessoncontent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Lesson Vote',
                'verbose_name_plural': 'Lesson Votes',
            },
        ),
        migrations.CreateModel(
            name='MentorReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('verified', 'Verified Correct'), ('needs_improvement', 'Needs Improvement'), ('rejected', 'Rejected')], help_text="Mentor's verdict on lesson quality", max_length=20)),
                ('feedback', models.TextField(help_text='Detailed mentor feedback for improvement')),
                ('expertise_area', models.CharField(help_text="Mentor's area of expertise (e.g., 'Python Programming')", max_length=100)),
                ('reviewed_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mentor_reviews', to='lessons.lessoncontent')),
                ('mentor', models.ForeignKey(help_text='Mentor who reviewed this lesson', limit_choices_to={'role': 'mentor'}, on_delete=django.db.models.deletion.CASCADE, related_name='mentor_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mentor Review',
                'verbose_name_plural': 'Mentor Reviews',
                'ordering': ['-reviewed_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRoadmapLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roadmap_step_title', models.CharField(help_text='Reference to roadmap step (denormalized for performance)', max_length=255)),
                ('lesson_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], db_index=True, default='not_started', max_length=20)),
                ('quiz_score', models.IntegerField(blank=True, help_text='Quiz score percentage (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('exercises_completed', models.IntegerField(default=0, help_text='Number of exercises completed', validators=[django.core.validators.MinValueValidator(0)])),
                ('time_spent', models.IntegerField(default=0, help_text='Time spent on lesson (minutes)', validators=[django.core.validators.MinValueValidator(0)])),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lesson_content', models.ForeignKey(blank=True, help_text='Specific lesson version assigned to this user', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_assignments', to='lessons.lessoncontent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roadmap_lessons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Roadmap Lesson',
                'verbose_name_plural': 'User Roadmap Lessons',
                'ordering': ['roadmap_step_title', 'lesson_number'],
            },
        ),
        migrations.AddIndex(
            model_name='lessoncontent',
            index=models.Index(fields=['cache_key', '-upvotes'], name='lessons_les_cache_k_d5f0bf_idx'),
        ),
        migrations.AddIndex(
            model_name='lessoncontent',
            index=models.Index(fields=['approval_status', '-upvotes'], name='lessons_les_approva_093a5f_idx'),
        ),
        migrations.AddIndex(
            model_name='lessoncontent',
            index=models.Index(fields=['roadmap_step_title', 'lesson_number', 'learning_style'], name='lessons_les_roadmap_acce51_idx'),
        ),
        migrations.AddIndex(
            model_name='lessoncontent',
            index=models.Index(fields=['-generated_at'], name='lessons_les_generat_d74378_idx'),
        ),
        migrations.AddIndex(
            model_name='lessonvote',
            index=models.Index(fields=['lesson_content', '-created_at'], name='lessons_les_lesson__7d779a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='lessonvote',
            unique_together={('user', 'lesson_content')},
        ),
        migrations.AddIndex(
            model_name='mentorreview',
            index=models.Index(fields=['lesson_content', '-reviewed_at'], name='lessons_men_lesson__d12372_idx'),
        ),
        migrations.AddIndex(
            model_name='mentorreview',
            index=models.Index(fields=['status'], name='lessons_men_status_1a78f3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mentorreview',
            unique_together={('mentor', 'lesson_content')},
        ),
        migrations.AddIndex(
            model_name='userroadmaplesson',
            index=models.Index(fields=['user', 'status'], name='lessons_use_user_id_af9370_idx'),
        ),
        migrations.AddIndex(
            model_name='userroadmaplesson',
            index=models.Index(fields=['lesson_content', 'status'], name='lessons_use_lesson__3bb950_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userroadmaplesson',
            unique_together={('user', 'roadmap_step_title', 'lesson_number')},
        ),
    ]
